using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Quad2 : MonoBehaviour
{

    public List<Vector3> vertices;
    public List<int> triangles;
    public List<Vector2> uvs;

    Vector3[] GetCubeVertices(Vector3 size)
    {
        vertices = new List<Vector3>();

        Vector3[] front = new Vector3[]
        {
            new Vector3(-size.x, -size.y, -size.z),
            new Vector3(-size.x, size.y, -size.z),
            new Vector3(size.x, size.y, -size.z),
            new Vector3(size.x, -size.y, -size.z)
        };

        Vector3[] back = new Vector3[]
{
            new Vector3(size.x, -size.y, size.z),
            new Vector3(size.x, size.y, size.z),
            new Vector3(-size.x, size.y, size.z),
            new Vector3(-size.x, -size.y, size.z)
};

        Vector3[] top = new Vector3[]
        {
            new Vector3(-size.x, size.y, -size.z),
            new Vector3(-size.x, size.y, size.z),
            new Vector3(size.x, size.y, size.z),
            new Vector3(size.x, size.y, -size.z)
        };

        Vector3[] bottom = new Vector3[]
{
            new Vector3(-size.x, -size.y, size.z),
            new Vector3(-size.x, -size.y, -size.z),
            new Vector3(size.x, -size.y, -size.z),
            new Vector3(size.x, -size.y, size.z)
};

        Vector3[] right = new Vector3[]
{
            new Vector3(-size.x, -size.y, size.z),
            new Vector3(-size.x, size.y, size.z),
            new Vector3(-size.x, size.y, -size.z),
            new Vector3(-size.x, -size.y, -size.z)
};

        Vector3[] left = new Vector3[]
        {
            new Vector3(size.x, -size.y, -size.z),
            new Vector3(size.x, size.y, -size.z),
            new Vector3(size.x, size.y, size.z),
            new Vector3(size.x, -size.y, size.z)
        };


        vertices.AddRange(front);
        vertices.AddRange(back);
        vertices.AddRange(top);
        vertices.AddRange(bottom);
        vertices.AddRange(right);
        vertices.AddRange(left);

        return vertices.ToArray();
    }

    //int[] GetQuadTriangleArray(int startIndex, bool bBackward = true)
    //{
    //    return new int[]
    //    {
    //        startIndex,
    //        bBackward ? startIndex + 1 : startIndex + 2,
    //        bBackward ? startIndex + 2 : startIndex + 1,
    //        startIndex,
    //        bBackward ? startIndex + 2 : startIndex + 3,
    //        bBackward ? startIndex + 3 : startIndex + 2
    //    };
    //}

    //int[] GetTrianglesArray(Vector3[] vertices)
    //{
    //    triangles = new List<int>();

    //    bool bBackward = true;
    //    for (int i = 0; i < vertices.Length / 4; i++)
    //    {
    //        int[] quadTriangles = GetQuadTriangleArray(i * 4, bBackward);
    //        Debug.Log(bBackward);
    //        triangles.AddRange(quadTriangles);
    //        bBackward = !bBackward;

    //    }
    //    return triangles.ToArray();
    //}

    int[] GetQuadTriangleArray(int startIndex)
    {
        return new int[]
        {
            startIndex, startIndex + 1, startIndex + 2,
            startIndex, startIndex + 2, startIndex + 3
        };
    }


    int[] GetTrianglesArray(Vector3[] vertices)
    {
        for (int i = 0; i < vertices.Length / 4; i++)
        {
            int[] quadTriangles = GetQuadTriangleArray(i * 4);
            triangles.AddRange(quadTriangles);

        }
        return triangles.ToArray();
    }

    Vector2[] GetUVArray(Vector2 origin, Vector3 uvSize)
    {
        uvs = new List<Vector2>();

        Vector2[] front = new Vector2[]
        {
            new Vector2(origin.x + uvSize.z, origin.y),
            new Vector2(origin.x + uvSize.z, origin.y + uvSize.y),
            new Vector2(origin.x + uvSize.z + uvSize.x, origin.y + uvSize.y),
            new Vector2(origin.x + uvSize.z + uvSize.x, origin.y)
        };

        Vector2[] back = new Vector2[]
{
            new Vector2(origin.x + uvSize.x + uvSize.z * 2, origin.y),
            new Vector2(origin.x + uvSize.x + uvSize.z * 2, origin.y + uvSize.y),
            new Vector2(origin.x + uvSize.x * 2 + uvSize.z * 2, origin.y + uvSize.y),
            new Vector2(origin.x + uvSize.x * 2 + uvSize.z * 2, origin.y),

};

        Vector2[] bottom = new Vector2[]
        {
            new Vector2(origin.x + uvSize.x + uvSize.x , origin.y + uvSize.y),
            new Vector2(origin.x + uvSize.x + uvSize.x, origin.y + uvSize.y + uvSize.z),
            new Vector2(origin.x + uvSize.x * 2 + uvSize.z, origin.y + uvSize.y + uvSize.z),
            new Vector2(origin.x + uvSize.x * 2 + uvSize.z, origin.y + uvSize.y)
        };
        Vector2[] top = new Vector2[]
{

            new Vector2(origin.x + uvSize.z, origin.y + uvSize.y),
            new Vector2(origin.x + uvSize.z, origin.y + uvSize.y + uvSize.z),
            new Vector2(origin.x + uvSize.z + uvSize.x, origin.y + uvSize.y + uvSize.z),
            new Vector2(origin.x + uvSize.z + uvSize.x, origin.y + uvSize.y)
};
        Vector2[] right = new Vector2[]
{
            new Vector2(origin.x, origin.y),
            new Vector2(origin.x, origin.y + uvSize.y),
            new Vector2(origin.x + uvSize.x, origin.y + uvSize.y),
            new Vector2(origin.x + uvSize.x, origin.y)
};

        Vector2[] left = new Vector2[]
        {
            new Vector2(origin.x + uvSize.x + uvSize.z, origin.y), //0.25f, 0.75f
            new Vector2(origin.x + uvSize.x + uvSize.z, origin.y + uvSize.y), //0.25f, 0.875f
            new Vector2(origin.x + uvSize.x * 2 + uvSize.z, origin.y + uvSize.y), //0.5f, 0.875f
            new Vector2(origin.x + uvSize.x * 2 + uvSize.z, origin.y) //0.5f, 0.75f
        };





        uvs.AddRange(front);
        uvs.AddRange(back);
        uvs.AddRange(top);
        uvs.AddRange(bottom);
        uvs.AddRange(right);
        uvs.AddRange(left);

        return uvs.ToArray();
    }

    // Use this for initialization
    void Start()
    {

        MeshFilter mf = GetComponent<MeshFilter>();
        Mesh m = new Mesh();

        m.vertices = GetCubeVertices(new Vector3(5f, 5f, 5f));
        m.triangles = GetTrianglesArray(m.vertices);
        m.uv = GetUVArray(new Vector2(0f, 0.75f), new Vector3(0.125f, 0.125f, 0.125f));
        m.RecalculateNormals();
        //foreach (Vector3 n in m.normals)
        //    Debug.Log(n);
        mf.mesh = m;
    }

    // Update is called once per frame
    void Update()
    {

    }
}
